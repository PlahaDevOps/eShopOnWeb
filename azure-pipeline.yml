trigger:
  branches:
    include:
      - main

pool:
  name: Default

variables:
  solution: 'eShopOnWeb.sln'
  buildConfiguration: 'Release'
  publishDir: '$(Build.ArtifactStagingDirectory)/publish'
  stagingPath: 'C:\inetpub\eShopOnWeb-Staging'
  productionPath: 'C:\inetpub\eShopOnWeb'
  stagingSite: 'eShopOnWeb-Staging'
  productionSite: 'eShopOnWeb'
  stagingAppPool: 'eShopOnWeb-Staging'
  productionAppPool: 'eShopOnWeb'

stages:
- stage: BuildAndDeployStaging
  displayName: 'Build and Deploy to Staging'
  jobs:
  - deployment: DeployStaging
    environment: 'Staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            displayName: 'Checkout Source Code'
            
          - script: dotnet restore $(solution)
            displayName: 'Restore Packages'

          - script: dotnet build src/Web/Web.csproj -c $(buildConfiguration)
            displayName: 'Build Project'

          - script: dotnet test tests/UnitTests/UnitTests.csproj -c $(buildConfiguration)
            displayName: 'Run Tests'
            continueOnError: true

          - script: dotnet publish src/Web/Web.csproj -c $(buildConfiguration) -o $(publishDir)
            displayName: 'Publish Project'

          - task: PowerShell@2
            displayName: 'Configure Staging Environment'
            inputs:
              targetType: inline
              script: |
                Write-Host "Configuring staging environment..."
                Write-Host "Current directory: $(System.DefaultWorkingDirectory)"
                Write-Host "Checking if staging config exists..."
                
                if (Test-Path "src/Web/appsettings.Staging.json") {
                  Write-Host "Staging config found, copying..."
                  Copy-Item "src/Web/appsettings.Staging.json" "$(publishDir)/appsettings.json" -Force
                  Write-Host "Staging configuration applied"
                } else {
                  Write-Host "Staging config not found, using default config..."
                  Copy-Item "src/Web/appsettings.json" "$(publishDir)/appsettings.json" -Force
                  Write-Host "Default configuration applied"
                }

          - task: PowerShell@2
            displayName: 'Clean Staging Folder'
            inputs:
              targetType: inline
              script: |
                Write-Host "Cleaning staging folder: $(stagingPath)"
                try {
                  Import-Module WebAdministration -ErrorAction SilentlyContinue
                  $appPool = "$(stagingAppPool)"
                  if (Test-Path "IIS:\AppPools\$appPool") {
                    Write-Host "Stopping staging app pool '$appPool'..."
                    Stop-WebAppPool -Name $appPool -ErrorAction SilentlyContinue
                    Start-Sleep -Seconds 5
                  }
                }
                catch {
                  Write-Host "Could not stop staging app pool"
                }
                
                if (Test-Path "$(stagingPath)") {
                  try {
                    Get-ChildItem -Path "$(stagingPath)" -Recurse -File | ForEach-Object {
                      try {
                        Remove-Item $_.FullName -Force -ErrorAction SilentlyContinue
                      }
                      catch {
                        Write-Host "Could not remove file: $($_.Name)"
                      }
                    }
                    Write-Host "Staging folder cleaned successfully"
                  }
                  catch {
                    Write-Host "Warning: Some staging files could not be removed"
                  }
                } else {
                  New-Item -ItemType Directory -Path "$(stagingPath)" -Force
                  Write-Host "Created staging folder"
                }

          - task: CopyFiles@2
            displayName: 'Deploy to Staging'
            inputs:
              SourceFolder: '$(publishDir)'
              Contents: '**'
              TargetFolder: '$(stagingPath)'
              OverWrite: true
              CleanTargetFolder: false

          - task: PowerShell@2
            displayName: 'Recycle Staging IIS'
            inputs:
              targetType: inline
              script: |
                $appPool = "$(stagingAppPool)"
                $siteName = "$(stagingSite)"
                Write-Host "Starting staging IIS services..."
                
                try {
                  Import-Module WebAdministration -ErrorAction Stop
                  
                  if (Test-Path "IIS:\AppPools\$appPool") {
                    Write-Host "Starting staging app pool '$appPool'..."
                    Start-WebAppPool -Name $appPool -ErrorAction SilentlyContinue
                    Start-Sleep -Seconds 3
                    
                    Write-Host "Recycling staging app pool '$appPool'..."
                    Restart-WebAppPool -Name $appPool
                    Write-Host "Staging app pool recycled successfully."
                  } else {
                    Write-Host "Staging app pool '$appPool' not found."
                  }
                  
                  if (Test-Path "IIS:\Sites\$siteName") {
                    Write-Host "Starting staging website '$siteName'..."
                    Start-Website -Name $siteName -ErrorAction SilentlyContinue
                    Write-Host "Staging website started successfully."
                  } else {
                    Write-Host "Staging website '$siteName' not found."
                  }
                }
                catch {
                  Write-Host "Warning: Could not manage staging IIS services: $($_.Exception.Message)"
                }

          - task: PowerShell@2
            displayName: 'Verify Staging Site'
            inputs:
              targetType: inline
              script: |
                $url = "http://localhost:8081"
                Write-Host "Verifying staging site at: $url"
                Start-Sleep -Seconds 5
                
                try {
                  $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 15
                  if ($response.StatusCode -eq 200) {
                    Write-Host "✅ Staging site is running correctly at $url"
                  } else {
                    Write-Host "⚠️ Staging site responded with status: $($response.StatusCode)"
                  }
                }
                catch {
                  Write-Host "❌ Could not verify staging site: $($_.Exception.Message)"
                  Write-Host "This might be normal if the site needs more time to start"
                }

- stage: DeployToProduction
  displayName: 'Manual Promotion to Production'
  dependsOn: BuildAndDeployStaging
  condition: succeeded()
  jobs:
  - deployment: DeployProd
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            displayName: 'Checkout Source Code'
            
          - task: PowerShell@2
            displayName: 'Clean Production Folder'
            inputs:
              targetType: inline
              script: |
                Write-Host "Cleaning production folder: $(productionPath)"
                
                try {
                  Import-Module WebAdministration -ErrorAction SilentlyContinue
                  $appPool = "$(productionAppPool)"
                  if (Test-Path "IIS:\AppPools\$appPool") {
                    Write-Host "Stopping production app pool '$appPool'..."
                    Stop-WebAppPool -Name $appPool -ErrorAction SilentlyContinue
                    Start-Sleep -Seconds 5
                  }
                }
                catch {
                  Write-Host "Could not stop production app pool"
                }
                
                if (Test-Path "$(productionPath)") {
                  try {
                    Get-ChildItem -Path "$(productionPath)" -Recurse -File | ForEach-Object {
                      try {
                        Remove-Item $_.FullName -Force -ErrorAction SilentlyContinue
                      }
                      catch {
                        Write-Host "Could not remove file: $($_.Name)"
                      }
                    }
                    Write-Host "Production folder cleaned successfully"
                  }
                  catch {
                    Write-Host "Warning: Some production files could not be removed"
                  }
                } else {
                  New-Item -ItemType Directory -Path "$(productionPath)" -Force
                  Write-Host "Created production folder"
                }

          - script: dotnet restore $(solution)
            displayName: 'Restore Packages (Production)'

          - script: dotnet build src/Web/Web.csproj -c $(buildConfiguration)
            displayName: 'Build Project (Production)'

          - script: dotnet publish src/Web/Web.csproj -c $(buildConfiguration) -o $(productionPath)
            displayName: 'Publish to Production'

          - task: PowerShell@2
            displayName: 'Configure Production Environment'
            inputs:
              targetType: inline
              script: |
                Write-Host "Configuring production environment..."
                Write-Host "Current directory: $(System.DefaultWorkingDirectory)"
                Write-Host "Checking if production config exists..."
                
                if (Test-Path "src/Web/appsettings.Production.json") {
                  Write-Host "Production config found, copying..."
                  Copy-Item "src/Web/appsettings.Production.json" "$(productionPath)/appsettings.json" -Force
                  Write-Host "Production configuration applied"
                } else {
                  Write-Host "Production config not found, using default config..."
                  Copy-Item "src/Web/appsettings.json" "$(productionPath)/appsettings.json" -Force
                  Write-Host "Default configuration applied"
                }

          - task: PowerShell@2
            displayName: 'Recycle Production IIS'
            inputs:
              targetType: inline
              script: |
                $appPool = "$(productionAppPool)"
                $siteName = "$(productionSite)"
                Write-Host "Starting production IIS services..."
                
                try {
                  Import-Module WebAdministration -ErrorAction Stop
                  
                  if (Test-Path "IIS:\AppPools\$appPool") {
                    Write-Host "Starting production app pool '$appPool'..."
                    Start-WebAppPool -Name $appPool -ErrorAction SilentlyContinue
                    Start-Sleep -Seconds 3
                    
                    Write-Host "Recycling production app pool '$appPool'..."
                    Restart-WebAppPool -Name $appPool
                    Write-Host "Production app pool recycled successfully."
                  } else {
                    Write-Host "Production app pool '$appPool' not found."
                  }
                  
                  if (Test-Path "IIS:\Sites\$siteName") {
                    Write-Host "Starting production website '$siteName'..."
                    Start-Website -Name $siteName -ErrorAction SilentlyContinue
                    Write-Host "Production website started successfully."
                  } else {
                    Write-Host "Production website '$siteName' not found."
                  }
                }
                catch {
                  Write-Host "Warning: Could not manage production IIS services: $($_.Exception.Message)"
                }

          - task: PowerShell@2
            displayName: 'Verify Production'
            inputs:
              targetType: inline
              script: |
                $url = "http://localhost:8080"
                Write-Host "Verifying production site at: $url"
                Start-Sleep -Seconds 5
                
                try {
                  $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 15
                  if ($response.StatusCode -eq 200) {
                    Write-Host "✅ Production site is running correctly at $url"
                  } else {
                    Write-Host "⚠️ Production site responded with status: $($response.StatusCode)"
                  }
                }
                catch {
                  Write-Host "❌ Could not verify production site: $($_.Exception.Message)"
                  Write-Host "This might be normal if the site needs more time to start"
                }