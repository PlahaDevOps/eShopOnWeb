trigger:
  branches:
    include:
      - main

pool:
  name: Default  # Uses your self-hosted agent on VM2

variables:
  solution: 'eShopOnWeb.sln'
  buildConfiguration: 'Release'
  publishDir: '$(Build.ArtifactStagingDirectory)/publish'
  iisTargetPath: 'C:\inetpub\eShopOnWeb'  # <-- your actual running folder

steps:

# Restore dependencies
- script: |
    dotnet restore $(solution)
  displayName: 'Restore NuGet Packages'

# Build the web project
- script: |
    dotnet build src/Web/Web.csproj -c $(buildConfiguration)
  displayName: 'Build Web Project'

# Optional tests
- script: |
    dotnet test tests/UnitTests/UnitTests.csproj --configuration $(buildConfiguration) --no-build
  displayName: 'Run Unit Tests'
  continueOnError: true

# Publish to staging folder
- script: |
    dotnet publish src/Web/Web.csproj -c $(buildConfiguration) -o $(publishDir)
  displayName: 'Publish Web Project'

# Clean IIS target folder
- task: PowerShell@2
  displayName: 'Clean IIS Folder'
  inputs:
    targetType: inline
    script: |
      if (Test-Path "$(iisTargetPath)") {
        Remove-Item -Path "$(iisTargetPath)\*" -Recurse -Force -ErrorAction SilentlyContinue
        Write-Host "Cleaned IIS folder successfully"
      } else {
        New-Item -ItemType Directory -Path "$(iisTargetPath)" -Force
        Write-Host "Created IIS folder"
      }

# Copy published files to IIS folder
- task: CopyFiles@2
  displayName: 'Deploy to IIS'
  inputs:
    SourceFolder: '$(publishDir)'
    Contents: '**'
    TargetFolder: '$(iisTargetPath)'

# Recycle app pool (optional and safe)
- task: PowerShell@2
  displayName: 'Recycle IIS App Pool'
  inputs:
    targetType: inline
    script: |
      $appPool = "eShopOnWeb"
      Import-Module WebAdministration
      if (Test-Path "IIS:\AppPools\$appPool") {
        Restart-WebAppPool -Name $appPool
        Write-Host "App pool '$appPool' recycled successfully."
      } else {
        Write-Host "App pool '$appPool' not found. Skipping recycle."
      }

# Optional verification
- task: PowerShell@2
  displayName: 'Verify Site is Running'
  inputs:
    targetType: inline
    script: |
      $url = "http://localhost:8080"
      try {
        $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 10
        if ($response.StatusCode -eq 200) {
          Write-Host "Site is running correctly at $url"
        } else {
          Write-Host "Site responded with status: $($response.StatusCode)"
        }
      }
      catch {
        Write-Host "Could not verify site: $($_.Exception.Message)"
      }