trigger:
  branches:
    include:
      - main

pool:
  name: Default  # Uses your self-hosted agent 'winvm1'

variables:
  solution: 'eShopOnWeb.sln'  # Set the exact relative path
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  publishDir: '$(Build.ArtifactStagingDirectory)/publish'
  iisPath: 'C:\inetpub\wwwroot\eShopOnWeb'

steps:
- script: |
    dotnet restore $(solution)
  displayName: 'Restore NuGet Packages'

- script: |
    dotnet build src/Web/Web.csproj -c $(buildConfiguration)
  displayName: 'Build Web Project'

- script: |
    dotnet test tests/UnitTests/UnitTests.csproj --configuration $(buildConfiguration) --no-build
  displayName: 'Run Unit Tests'
  continueOnError: true  # Optional: change to false if you want to fail pipeline on test failure

- script: |
    dotnet publish src/Web/Web.csproj -c $(buildConfiguration) -o $(publishDir)
  displayName: 'Publish Web Project'

- task: PowerShell@2
  displayName: 'Clean IIS Folder'
  inputs:
    targetType: inline
    script: |
      Write-Host "Cleaning IIS target folder"
      if (Test-Path '$(iisPath)') {
        Remove-Item -Path '$(iisPath)\*' -Recurse -Force -ErrorAction SilentlyContinue
        Write-Host "IIS folder cleaned successfully"
      } else {
        Write-Host "IIS folder does not exist, creating it"
        New-Item -ItemType Directory -Path '$(iisPath)' -Force
      }

- task: CopyFiles@2
  displayName: 'Copy Published Files to IIS Root'
  inputs:
    SourceFolder: '$(publishDir)'
    Contents: '**'
    TargetFolder: '$(iisPath)'

- task: PowerShell@2
  displayName: 'Restart IIS'
  inputs:
    targetType: inline
    script: |
      try {
        Write-Host "Restarting IIS..."
        # Try multiple methods to restart IIS
        $success = $false
        
        # Method 1: Restart service directly
        try {
          Restart-Service W3SVC -Force -ErrorAction Stop
          Write-Host "IIS restarted successfully using Restart-Service"
          $success = $true
        }
        catch {
          Write-Host "Restart-Service failed: $($_.Exception.Message)"
        }
        
        # Method 2: Use iisreset command
        if (-not $success) {
          try {
            & iisreset /restart
            Write-Host "IIS restarted successfully using iisreset"
            $success = $true
          }
          catch {
            Write-Host "iisreset failed: $($_.Exception.Message)"
          }
        }
        
        # Method 3: Stop and start manually
        if (-not $success) {
          try {
            Stop-Service W3SVC -Force -ErrorAction Stop
            Start-Sleep -Seconds 2
            Start-Service W3SVC -ErrorAction Stop
            Write-Host "IIS restarted successfully using stop/start"
            $success = $true
          }
          catch {
            Write-Host "Manual stop/start failed: $($_.Exception.Message)"
          }
        }
        
        if (-not $success) {
          Write-Host "All IIS restart methods failed. Continuing without restart..."
          Write-Host "Note: You may need to manually restart IIS or run the agent as administrator"
        }
      }
      catch {
        Write-Host "Unexpected error during IIS restart: $($_.Exception.Message)"
        # Don't fail the pipeline for IIS restart issues
        Write-Host "Continuing deployment..."
      }

- task: PowerShell@2
  displayName: 'Verify Deployment'
  inputs:
    targetType: inline
    script: |
      Write-Host "Verifying deployment..."
      Start-Sleep -Seconds 10
      try {
        $response = Invoke-WebRequest -Uri "http://localhost:8080" -UseBasicParsing -TimeoutSec 30
        if ($response.StatusCode -eq 200) {
          Write-Host "Deployment verified successfully"
        } else {
          Write-Host "Deployment verification failed: Status $($response.StatusCode)"
          exit 1
        }
      }
      catch {
        Write-Host "Deployment verification failed: $($_.Exception.Message)"
        exit 1
      }
