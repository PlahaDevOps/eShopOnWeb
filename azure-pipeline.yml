trigger:
  branches:
    include:
      - main

pool:
  name: Default  # Uses your self-hosted agent on VM2

variables:
  solution: 'eShopOnWeb.sln'
  buildConfiguration: 'Release'
  publishDir: '$(Build.ArtifactStagingDirectory)/publish'
  iisTargetPath: 'C:\inetpub\eShopOnWeb'  # <-- your actual running folder

steps:

# Restore dependencies
- script: |
    dotnet restore $(solution)
  displayName: 'Restore NuGet Packages'

# Build the web project
- script: |
    dotnet build src/Web/Web.csproj -c $(buildConfiguration)
  displayName: 'Build Web Project'

# Optional tests
- script: |
    dotnet test tests/UnitTests/UnitTests.csproj --configuration $(buildConfiguration) --no-build
  displayName: 'Run Unit Tests'
  continueOnError: true

# Publish to staging folder
- script: |
    dotnet publish src/Web/Web.csproj -c $(buildConfiguration) -o $(publishDir)
  displayName: 'Publish Web Project'

# Clean IIS target folder
- task: PowerShell@2
  displayName: 'Clean IIS Folder'
  inputs:
    targetType: inline
    script: |
      Write-Host "Cleaning IIS folder: $(iisTargetPath)"
      
      # Stop the app pool first to release file locks
      try {
        Import-Module WebAdministration -ErrorAction SilentlyContinue
        $appPool = "eShopOnWeb"
        if (Test-Path "IIS:\AppPools\$appPool") {
          Write-Host "Stopping app pool '$appPool' to release file locks..."
          Stop-WebAppPool -Name $appPool -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 3
        }
      }
      catch {
        Write-Host "Could not stop app pool (this is normal if WebAdministration is not available)"
      }
      
      # Clean the directory
      if (Test-Path "$(iisTargetPath)") {
        try {
          # Try to remove all files and folders
          Get-ChildItem -Path "$(iisTargetPath)" -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
          Write-Host "Cleaned IIS folder successfully"
        }
        catch {
          Write-Host "Warning: Some files could not be removed (may be locked by IIS)"
          Write-Host "This is normal and the deployment will continue"
        }
      } else {
        New-Item -ItemType Directory -Path "$(iisTargetPath)" -Force
        Write-Host "Created IIS folder"
      }

# Copy published files to IIS folder
- task: CopyFiles@2
  displayName: 'Deploy to IIS'
  inputs:
    SourceFolder: '$(publishDir)'
    Contents: '**'
    TargetFolder: '$(iisTargetPath)'
    OverWrite: true
    CleanTargetFolder: false

# Recycle app pool (optional and safe)
- task: PowerShell@2
  displayName: 'Recycle IIS App Pool'
  inputs:
    targetType: inline
    script: |
      $appPool = "eShopOnWeb"
      Write-Host "Recycling app pool: $appPool"
      
      try {
        Import-Module WebAdministration -ErrorAction Stop
        if (Test-Path "IIS:\AppPools\$appPool") {
          # Start the app pool if it was stopped during cleaning
          Start-WebAppPool -Name $appPool -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 2
          
          # Now recycle it
          Restart-WebAppPool -Name $appPool
          Write-Host "App pool '$appPool' recycled successfully."
        } else {
          Write-Host "App pool '$appPool' not found. Skipping recycle."
          Write-Host "Available app pools:"
          Get-ChildItem IIS:\AppPools | ForEach-Object { Write-Host "  - $($_.Name)" }
        }
      }
      catch {
        Write-Host "Warning: Could not recycle app pool: $($_.Exception.Message)"
        Write-Host "This might be normal if WebAdministration module is not available"
      }

# Optional verification
- task: PowerShell@2
  displayName: 'Verify Site is Running'
  inputs:
    targetType: inline
    script: |
      $url = "http://localhost:8080"
      try {
        $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 10
        if ($response.StatusCode -eq 200) {
          Write-Host "Site is running correctly at $url"
        } else {
          Write-Host "Site responded with status: $($response.StatusCode)"
        }
      }
      catch {
        Write-Host "Could not verify site: $($_.Exception.Message)"
      }